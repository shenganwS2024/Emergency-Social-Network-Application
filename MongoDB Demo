// Message Schema Class
const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
    username: String,
    text: String,
    timestamp: Date
});

module.exports = mongoose.model('Message', messageSchema);


// User Schema Class
const mongoose = require('mongoose');


const userSchema = new mongoose.Schema({
    username: { type: String, unique: true },
    password: String
  
});

module.exports = mongoose.model('User', userSchema);

//Server Class (Demo on MongoDB Application
const User = require('./models/User');
const Message = require('./models/Message');
const mongoose = require("mongoose");

//Connet to my local mongodb on port 27017
mongoose.connect('mongodb://localhost:27017/Chatroom', {
});

const express = require("express")
const path = require("path")
const app = express();
const server = require("http").createServer(app);
const io = require("socket.io")(server);
const User = require('./models/User');
const Message = require('./models/Message');
const mongoose = require("mongoose");

//Connet to my local mongodb on port 27017
mongoose.connect('mongodb://localhost:27017/Chatroom', {
});

// serve the front-end component index.html
app.use(express.static(path.join(__dirname + "/public")))
server.listen(3000);

// when a new user connect to the session
io.on("connection", (socket) => {
    // listen on the event "register". when emitted, execute the function
    socket.on("register", async ({ username, password }) => {
        // check if username exists in the db
        const usernameExists = await User.findOne({ username: username });
        if (usernameExists) {
            // Username already exists in the database
            console.log("Username already taken.");
            socket.emit("register_response", { success: false, message: "Username already exists" });
        } else {
            // Username does not exist and is available for use
            // insert the newly registered user with their
            const newUser = new User({ username, password });
            await newUser.save();

            // Emit success response
            socket.emit("register_response", { success: true, message: "You are now registered, login now! " });
            // socket.broadcast.emit("update", username + " has joined the conversation");
        }


    })

// Storing Chat Messages
      socket.on("chat", async (message) => {

        const newMessage = new Message(message);
        await newMessage.save();

        socket.broadcast.emit("chat", message);
    })
